import cflw代码库py.cflw字符串 as 字符串
import cflw代码库py.cflw工具_序列 as 序列
import cflw代码库py.cflw网络地址 as 地址
from ..基础接口 import 数据表
from ..基础接口 import 信息
from . import 接口 as 实现接口
def f解析速率(a速率: str):
	if "-" in a速率:
		return int(字符串.f提取字符串之间(a速率, "-", None))
	if a速率.isdigit():
		return int(a速率)
	return 0
#===============================================================================
# 接口状态表
#===============================================================================
class F接口状态ev6(数据表.I解析表格管线):
	"""show interface status
	适用于: 浪潮s5350(v6.2.27.R5.*)"""
	c标题行0 = "Port        Status     Duplex  Speed   Mode    Type                    Description  "
	c标题行1 = "------------------------------------------------------------------------------------------"
	c接口 = 0
	c状态 = 12	#链路状态
	c双工 = 23
	c速率 = 31
	c模式 = 39	#链路类型
	c类型 = 47	#以太网类型
	c描述 = 71
	ca列 = 数据表.C切割列(c接口, c状态, c双工, c速率, c模式, c类型, c描述)
	def __init__(self):
		数据表.I解析表格管线.__init__(self)
		self.f添加字段(数据表.E字段.e本端接口, F接口状态ev6.ca列[0], 实现接口.f创建接口ev6)
		self.f添加字段(数据表.E字段.e本端链路状态, F接口状态ev6.ca列[1], 信息.f解析起宕状态)
		self.f添加字段(数据表.E字段.e本端双工模式, F接口状态ev6.ca列[2], 信息.f解析双工模式)
		self.f添加字段(数据表.E字段.e本端速率, F接口状态ev6.ca列[3], f解析速率)
		self.f添加字段(数据表.E字段.e本端描述, F接口状态ev6.ca列[6], str)
	f初始处理 = staticmethod(数据表.F去标题行(c标题行0, c标题行1))
	fi有效行 = staticmethod(数据表.F有效长度(c描述))	
f接口状态ev6 = F接口状态ev6()
#===============================================================================
# 接口描述表
#===============================================================================
class F接口描述ev6(数据表.I解析表格管线):
	"""show interface description
	适用于: 浪潮s5350(v6.2.27.R5.*)"""
	c标题行0 = "Port        Status     Description"
	c标题行1 = "-----------------------------------------------------------------------------"
	c接口 = 0
	c状态 = 12
	c描述 = 23
	ca列 = 数据表.C切割列(c接口, c状态, c描述)
	def __init__(self):
		数据表.I解析表格管线.__init__(self)
		self.f添加字段(数据表.E字段.e本端接口, F接口描述ev6.ca列[0], 实现接口.f创建接口ev6)
		self.f添加字段(数据表.E字段.e本端链路状态, F接口描述ev6.ca列[1], 信息.f解析起宕状态)
		self.f添加字段(数据表.E字段.e本端描述, F接口描述ev6.ca列[2], str)
	f初始处理 = staticmethod(数据表.F去标题行(c标题行0, c标题行1))
	fi有效行 = staticmethod(数据表.F有效长度(c描述))	
f接口描述ev6 = F接口描述ev6()
#===============================================================================
# 接口摘要表
#===============================================================================
class F接口摘要ev6(数据表.I解析表格管线):
	"""show interface summary
	适用于: 浪潮s5350(v6.2.27.R5.*)"""
	c标题行0 = "Interface    Link     RXBS          RXPS          TXBS          TXPS        "
	c标题行1 = "-----------------------------------------------------------------------------"
	c接口 = 0
	c状态 = 13
	c接收位秒 = 22
	c接口包秒 = 36
	c发送位秒 = 50
	c发送包秒 = 64
	ca列 = 数据表.C切割列(c接口, c状态, c接收位秒, c接口包秒, c发送位秒, c发送包秒)
	def __init__(self):
		数据表.I解析表格管线.__init__(self)
		self.f添加字段(数据表.E字段.e本端接口, F接口摘要ev6.ca列[0], 实现接口.f创建接口ev6)
		self.f添加字段(数据表.E字段.e本端链路状态, F接口摘要ev6.ca列[1], 信息.f解析起宕状态)
		self.f添加字段(数据表.E字段.e本端每秒发送字节数, F接口摘要ev6.ca列[2], int)
		self.f添加字段(数据表.E字段.e本端每秒发送包数, F接口摘要ev6.ca列[3], int)
		self.f添加字段(数据表.E字段.e本端每秒接收字节数, F接口摘要ev6.ca列[4], int)
		self.f添加字段(数据表.E字段.e本端每秒接收包数, F接口摘要ev6.ca列[5], int)
	f初始处理 = staticmethod(数据表.F去标题行(c标题行0, c标题行1))
	fi有效行 = staticmethod(数据表.F有效长度(c发送包秒))
f接口摘要ev6 = F接口摘要ev6()
#===============================================================================
# 地址解析协议
#===============================================================================
class F地址解析协议(数据表.I解析表格管线):
	"""show ip arp
	适用于: 浪潮s5350(v6.2.27.R5.*)"""
	c标题行 = " Protocol    Address          Age (min)  Hardware Addr   Interface "
	c协议 = 0
	c网络地址 = 13
	c寿命 = 35
	c物理地址 = 41
	c接口 = 57
	ca列 = 数据表.C切割列(c协议, c网络地址, c寿命, c物理地址, c接口)
	def __init__(self):
		数据表.I解析表格管线.__init__(self)
		self.f添加字段(数据表.E字段.e对端网络地址4, F地址解析协议.ca列[1], 地址.S网络地址4.fc主机地址字符串)
		self.f添加字段(数据表.E字段.e本端寿命, F地址解析协议.ca列[2], lambda x: int(x) * 60)
		self.f添加字段(数据表.E字段.e对端物理地址, F地址解析协议.ca列[3], 地址.S物理地址.fc字符串)
		self.f添加字段(数据表.E字段.e本端接口, F地址解析协议.ca列[4], 实现接口.f创建接口ev6)
	f初始处理 = staticmethod(数据表.F去标题行(c标题行))
	@staticmethod
	def fi有效行(a行: str):
		if "-" in a行:	#地址是本端地址时,寿命为-
			return False
		return True
f地址解析协议 = F地址解析协议()
#===============================================================================
# 物理地址表
#===============================================================================
class F物理地址表(数据表.I解析表格管线):
	"""show mac address-table
	适用于: 浪潮s5350(v6.2.27.R5.*)"""
	c标题行0 = "Vlan    Mac Address       Type        Ports"
	c标题行1 = "----    -----------       --------    -----"
	c虚拟局域网 = 0
	c物理地址 = 8
	c类型 = 26
	c端口 = 38
	ca列 = 数据表.C切割列(c虚拟局域网, c物理地址, c类型, c端口)
	def __init__(self):
		数据表.I解析表格管线.__init__(self)
		self.f添加字段(数据表.E字段.e本端虚拟局域网, F物理地址表.ca列[0], int)
		self.f添加字段(数据表.E字段.e对端物理地址, F物理地址表.ca列[1], 地址.S物理地址.fc字符串)
		self.f添加字段(数据表.E字段.e对端物理地址类型, F物理地址表.ca列[2], 信息.ca物理地址类型.get)
		self.f添加字段(数据表.E字段.e本端接口, F物理地址表.ca列[3], 实现接口.f创建接口ev6)
	f初始处理 = staticmethod(数据表.F去标题行(c标题行0, c标题行1))
f物理地址表 = F物理地址表()