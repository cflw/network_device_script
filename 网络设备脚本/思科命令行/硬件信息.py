from ..基础接口 import 数据表
from ..基础接口 import 信息
#===============================================================================
# 风扇
#===============================================================================
class F风扇信息(数据表.I解析列表管线):
	"""show environment fan
	适用于: 浪潮s6650(v11.12.1a)"""
	c风扇正则 = r"(Switch (\d+))? FAN ([\w\-\d]+) is (\w+)"
	def __init__(self):
		数据表.I解析列表管线.__init__(self)
		self.f添加字段(数据表.E字段.e本端单元, 数据表.F正则字段(self.c风扇正则, 2), lambda x: int(x) if x else self.f上次结果())
		self.f添加字段(数据表.E字段.e本端风扇, 数据表.F正则字段(self.c风扇正则, 3), str)
		self.f添加字段(数据表.E字段.e本端风扇状态, 数据表.F正则字段(self.c风扇正则, 4), lambda x: x == "OK")
	f下一记录 = staticmethod(数据表.f下一记录_下一行)
f风扇信息 = F风扇信息()
#===============================================================================
# 电源
#===============================================================================
class F电源信息(数据表.I解析表格管线):
	"""show environment power
	适用于: 浪潮s6650(v11.12.1a)"""
	c交换机 = 0
	c电源 = 4
	c序列号 = 24
	c状态 = 37
	c系统电源 = 53
	c有源电源 = 62
	c功率 = 71
	ca列 = 数据表.C切割列(c交换机, c电源, c序列号, c状态, c系统电源, c有源电源, c功率)
	c标题行0 = "SW  PID                 Serial#     Status           Sys Pwr  PoE Pwr  Watts"
	c标题行1 = "--  ------------------  ----------  ---------------  -------  -------  -----"
	def __init__(self):
		数据表.I解析表格管线.__init__(self)
		self.f添加字段(数据表.E字段.e本端单元, self.ca列[0], str)
		self.f添加字段(数据表.E字段.e本端型号, self.ca列[1], str)
		self.f添加字段(数据表.E字段.e本端序列号, self.ca列[2], str)
		self.f添加字段(数据表.E字段.e本端电源状态, self.ca列[3], lambda x: x == "OK")
		self.f添加字段(数据表.E字段.e本端额定功率, self.ca列[6], int)
	f初始处理 = staticmethod(数据表.F去标题行(c标题行0, c标题行1))
	fi有效行 = staticmethod(数据表.F有效长度(c功率))
f电源信息 = F电源信息()
#===============================================================================
# 温度
#===============================================================================
def f取温度数字(a文本: str):
	"""解析"24 Degree Celsius"这种"""
	return int(a文本.split()[0])
class F温度信息(数据表.I解析列表管线):
	"""show environment temperature
	适用于: 浪潮s6650(v11.12.1a)"""
	c温度 = "Inlet Temperature Value"
	c状态 = "Temperature State"
	c黄 = "Yellow Threshold"
	c红 = "Red Threshold"
	def __init__(self):
		数据表.I解析列表管线.__init__(self)
		self.f添加字段(数据表.E字段.e本端单元, 数据表.F正则字段(r"Switch (\d+)", 1), lambda x: int(x) if x else self.f上次结果())
		self.f添加字段(数据表.E字段.e本端温度, 数据表.F列表字段(self.c温度), f取温度数字)
		self.f添加字段(数据表.E字段.e本端温度状态, 数据表.F列表字段(self.c状态), lambda x: x == "GREEN")
		self.f添加字段(数据表.E字段.e本端高温阈值, 数据表.F列表字段(self.c黄), f取温度数字)
		self.f添加字段(数据表.E字段.e本端严重高温阈值, 数据表.F列表字段(self.c红), f取温度数字)
	f下一记录 = staticmethod(数据表.F下一记录("Switch"))
f温度信息 = F温度信息()
#===============================================================================
# 堆叠
#===============================================================================
class F堆叠信息(数据表.I解析列表管线):
	"""show environment stack	包含风扇温度信息
	适用于: 浪潮s6650(v11.12.1a)"""
	c交换机 = "SWITCH"
	def __init__(self):
		数据表.I解析列表管线.__init__(self)
