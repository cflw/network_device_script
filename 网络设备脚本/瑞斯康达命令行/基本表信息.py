import pandas	#pandas
import cflw代码库py.cflw字符串 as 字符串
import cflw代码库py.cflw工具_运算 as 运算
import cflw代码库py.cflw网络地址 as 地址
from ..基础接口 import 数据表
from ..基础接口 import 信息
from . import 接口 as 实现接口
#===============================================================================
# 接口表
#===============================================================================
class F接口表_sv3(数据表.I解析表格管线):
	"""show interface brief
	适用于: 浪潮s6550(v3.x)"""
	c接口 = 0
	c管理 = 16
	c操作 = 26
	c速率双工 = 40
	c输入 = 52
	c输出 = 62
	c入错 = 72
	c出错 = 85
	c描述 = 101
	ca列 = 数据表.C切割列(c接口, c管理, c操作, c速率双工, c输入, c输出, c入错, c出错, c描述)
	c标题行0 = "Interface       Admin    Operate        Speed/Duplex     InUti    OutUti     InErrors    OutErrors   Description"
	c标题行1 = "-------------------------------------------------------------------------------------------------------------------------"
	def __init__(self):
		数据表.I解析表格管线.__init__(self)
		self.f添加字段(数据表.E字段.e本端接口, self.ca列[0], 实现接口.f创建接口缩写_sv3),
		self.f添加字段(数据表.E字段.e本端管理状态, self.ca列[1], 信息.f解析起宕状态),
		self.f添加字段(数据表.E字段.e本端链路状态, self.ca列[2], 信息.f解析起宕状态),
		self.f添加字段(数据表.E字段.e本端描述, self.ca列[8], 运算.f原值)
	f初始处理 = staticmethod(数据表.F去标题行(c标题行0, c标题行1))
f接口表_sv3 = F接口表_sv3()
#===============================================================================
# 网络接口表
#===============================================================================
class F网络接口表4_sv3(数据表.I解析表格管线):
	"""show ip interface brief
	适用于: 浪潮s6550(v3.x)"""
	c标题行0 = "VRF                       IF                              Address         NetMask         Catagory"
	c标题行1 = "--------------------------------------------------------------------------------------------------"
	c虚拟路由转发 = 0
	c接口 = 26
	c地址 = 58
	c掩码 = 74
	c种类 = 90
	ca列 = 数据表.C切割列(c虚拟路由转发, c接口, c地址, c种类)
	def __init__(self):
		数据表.I解析表格管线.__init__(self)
		self.f添加字段(数据表.E字段.e本端虚拟路由转发, self.ca列[0], str)
		self.f添加字段(数据表.E字段.e本端接口, self.ca列[1], 实现接口.f创建接口_sv3)
		self.f添加字段(数据表.E字段.e本端网络地址4, self.ca列[2], lambda x: 地址.S网络地址4.fc地址掩码(*x.split()))
	f初始处理 = staticmethod(数据表.F去标题行(c标题行0, c标题行1))
f网络接口表4_sv3 = F网络接口表4_sv3()
#===============================================================================
# 物理地址表
#===============================================================================
class F物理地址表_sv3(数据表.I解析表格管线):
	"""show mac-address all
	适用于: """
	c地址 = 0
	c端口 = 19
	c虚拟局域网 = 51
	c标志 = 67
	ca列 = 数据表.C切割列(c地址, c端口, c虚拟局域网, c标志)
	c标题行0 = "Mac Address        Port                            Vlan/Vxlan      Flag"
	c标题行1 = "--------------------------------------------------------------------"
	def __init__(self):
		数据表.I解析表格管线.__init__(self)
		self.f添加字段(数据表.E字段.e对端物理地址, self.ca列[0], 地址.S物理地址.fc字符串)
		self.f添加字段(数据表.E字段.e本端接口, self.ca列[1], 实现接口.f创建接口_sv3)
		self.f添加字段(数据表.E字段.e本端虚拟局域网, self.ca列[2], 信息.f解析虚拟局域网)
	f初始处理 = staticmethod(数据表.F去标题行(c标题行0, c标题行1))
	fi有效行 = staticmethod(数据表.F有效长度(c标志))
	fi结束 = staticmethod(数据表.fi空行)
f物理地址表_sv3 = F物理地址表_sv3()
#===============================================================================
# 地址解析表
#===============================================================================
ca地址解析协议类型 = {
	"static": 信息.E地址解析协议类型.e静态,
	"dynamic": 信息.E地址解析协议类型.e动态,
}
class F地址解析表_sv3(数据表.I解析表格管线):
	"""show arp
	适用于: """
	c网络地址 = 0
	c物理地址 = 16
	c接口 = 32
	c虚拟局域网 = 65
	c类型 = 71
	c寿命 = 81
	c状态 = 90
	ca列 = 数据表.C切割列(c网络地址, c物理地址, c接口, c虚拟局域网, c类型, c寿命, c状态)
	c标题行0 = "IP Address      Mac Address     Interface                        Vlan  Type      Age(s)    status       "
	c标题行1 = "----------------------------------------------------------------------------------------------------"
	def __init__(self):
		数据表.I解析表格管线.__init__(self)
		self.f添加字段(数据表.E字段.e对端网络地址4, self.ca列[0], 地址.S网络地址4.fc主机地址字符串)
		self.f添加字段(数据表.E字段.e对端物理地址, self.ca列[1], 地址.S物理地址.fc字符串)
		self.f添加字段(数据表.E字段.e本端接口, self.ca列[2], 实现接口.f创建接口_sv3)
		self.f添加字段(数据表.E字段.e本端虚拟局域网, self.ca列[3], 信息.f解析虚拟局域网)
		self.f添加字段(数据表.E字段.e本端地址解析协议类型, self.ca列[4], ca地址解析协议类型.get)
		self.f添加字段(数据表.E字段.e本端寿命, self.ca列[5], int)
	f初始处理 = staticmethod(数据表.F去标题行(c标题行0, c标题行1))
	fi有效行 = staticmethod(数据表.F有效长度(c类型))
f地址解析表_sv3 = F地址解析表_sv3()
